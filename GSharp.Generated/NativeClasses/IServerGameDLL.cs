//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSharp.Generated.NativeClasses {
    using System.ComponentModel;
    using System;
    
    
    public interface IServerGameDLL {
        
        /// <param name='param0'></param>
        /// <param name='param1'></param>
        void PreInit(System.IntPtr param0, System.IntPtr param1);
        
        /// <param name='engineFactory'></param>
        /// <param name='physicsFactory'></param>
        /// <param name='fileSystemFactory'></param>
        /// <param name='pGlobals'></param>
        bool DLLInit(System.IntPtr engineFactory, System.IntPtr physicsFactory, System.IntPtr fileSystemFactory, System.IntPtr pGlobals);
        
        /// <param name='fnReplayFactory'></param>
        bool ReplayInit(System.IntPtr fnReplayFactory);
        
        bool GameInit();
        
        /// <param name='pMapName'></param>
        /// <param name='pMapEntities'></param>
        /// <param name='pOldLevel'></param>
        /// <param name='pLandmarkName'></param>
        /// <param name='loadGame'></param>
        /// <param name='background'></param>
        bool LevelInit(string pMapName, string pMapEntities, string pOldLevel, string pLandmarkName, bool loadGame, bool background);
        
        /// <param name='pEdictList'></param>
        /// <param name='edictCount'></param>
        /// <param name='clientMax'></param>
        void ServerActivate(System.IntPtr pEdictList, int edictCount, int clientMax);
        
        /// <param name='simulating'></param>
        void GameFrame(bool simulating);
        
        /// <param name='simulating'></param>
        void PreClientUpdate(bool simulating);
        
        void LevelShutdown();
        
        void GameShutdown();
        
        void DLLShutdown();
        
        float GetTickInterval();
        
        System.IntPtr GetAllServerClasses();
        
        string GetGameDescription();
        
        void CreateNetworkStringTables();
        
        /// <param name='size'></param>
        System.IntPtr SaveInit(int size);
        
        /// <param name='param0'></param>
        /// <param name='param1'></param>
        /// <param name='param2'></param>
        /// <param name='param3'></param>
        /// <param name='param4'></param>
        /// <param name='param5'></param>
        void SaveWriteFields(System.IntPtr param0, string param1, System.IntPtr param2, System.IntPtr param3, System.IntPtr param4, int param5);
        
        /// <param name='param0'></param>
        /// <param name='param1'></param>
        /// <param name='param2'></param>
        /// <param name='param3'></param>
        /// <param name='param4'></param>
        /// <param name='param5'></param>
        void SaveReadFields(System.IntPtr param0, string param1, System.IntPtr param2, System.IntPtr param3, System.IntPtr param4, int param5);
        
        /// <param name='param0'></param>
        void SaveGlobalState(System.IntPtr param0);
        
        /// <param name='param0'></param>
        void RestoreGlobalState(System.IntPtr param0);
        
        /// <param name='param0'></param>
        void PreSave(System.IntPtr param0);
        
        /// <param name='param0'></param>
        void Save(System.IntPtr param0);
        
        /// <param name='comment'></param>
        /// <param name='maxlength'></param>
        /// <param name='flMinutes'></param>
        /// <param name='flSeconds'></param>
        /// <param name='bNoTime'></param>
        void GetSaveComment(System.IntPtr comment, int maxlength, float flMinutes, float flSeconds, bool bNoTime);
        
        /// <param name='param0'></param>
        void WriteSaveHeaders(System.IntPtr param0);
        
        /// <param name='param0'></param>
        void ReadRestoreHeaders(System.IntPtr param0);
        
        /// <param name='param0'></param>
        /// <param name='param1'></param>
        void Restore(System.IntPtr param0, bool param1);
        
        bool IsRestoring();
        
        /// <param name='param0'></param>
        /// <param name='param1'></param>
        int CreateEntityTransitionList(System.IntPtr param0, int param1);
        
        void BuildAdjacentMapList();
        
        /// <param name='msg_type'></param>
        /// <param name='name'></param>
        /// <param name='maxnamelength'></param>
        /// <param name='size'></param>
        bool GetUserMessageInfo(int msg_type, System.IntPtr name, int maxnamelength, System.IntPtr size);
        
        System.IntPtr GetStandardSendProxies();
        
        void PostInit();
        
        /// <param name='finalTick'></param>
        void Think(bool finalTick);
        
        /// <param name='pSaveName'></param>
        /// <param name='bCurrentlyInGame'></param>
        void PreSaveGameLoaded(string pSaveName, bool bCurrentlyInGame);
        
        bool ShouldHideServer();
        
        void InvalidateMdlCache();
        
        /// <param name='iCookie'></param>
        /// <param name='pPlayerEntity'></param>
        /// <param name='eStatus'></param>
        /// <param name='pCvarName'></param>
        /// <param name='pCvarValue'></param>
        void OnQueryCvarValueFinished(int iCookie, System.IntPtr pPlayerEntity, System.IntPtr eStatus, string pCvarName, string pCvarValue);
        
        void GameServerSteamAPIActivated();
        
        void GameServerSteamAPIShutdown();
        
        /// <param name='bHibernating'></param>
        void SetServerHibernation(bool bHibernating);
        
        System.IntPtr GetServerGCLobby();
        
        string GetServerBrowserMapOverride();
        
        string GetServerBrowserGameData();
        
        /// <param name='steamID64'></param>
        /// <param name='ipAddress'></param>
        /// <param name='serverPassword'></param>
        /// <param name='clientPassword'></param>
        /// <param name='name'></param>
        /// <param name='rejectionMessage'></param>
        /// <param name='rejectionMessageLen'></param>
        bool GMOD_CheckPassword(ulong steamID64, string ipAddress, string serverPassword, string clientPassword, string name, System.IntPtr rejectionMessage, uint rejectionMessageLen);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSharp.Generated.NativeClasses {
    using System.ComponentModel;
    using System.Runtime.InteropServices;
    using System;
    
    
    public interface IVEngineServer {
        
        /// <param name='s1'></param>
        /// <param name='s2'></param>
        void ChangeLevel(string s1, string s2);
        
        /// <param name='filename'></param>
        int IsMapValid(string filename);
        
        bool IsDedicatedServer();
        
        int IsInEditMode();
        
        /// <param name='s'></param>
        /// <param name='preload'></param>
        int PrecacheModel(string s, bool preload);
        
        /// <param name='s'></param>
        /// <param name='preload'></param>
        int PrecacheSentenceFile(string s, bool preload);
        
        /// <param name='name'></param>
        /// <param name='preload'></param>
        int PrecacheDecal(string name, bool preload);
        
        /// <param name='s'></param>
        /// <param name='preload'></param>
        int PrecacheGeneric(string s, bool preload);
        
        /// <param name='s'></param>
        bool IsModelPrecached(string s);
        
        /// <param name='s'></param>
        bool IsDecalPrecached(string s);
        
        /// <param name='s'></param>
        bool IsGenericPrecached(string s);
        
        /// <param name='org'></param>
        int GetClusterForOrigin(System.IntPtr org);
        
        /// <param name='cluster'></param>
        /// <param name='outputpvslength'></param>
        /// <param name='outputpvs'></param>
        int GetPVSForCluster(int cluster, int outputpvslength, System.IntPtr outputpvs);
        
        /// <param name='org'></param>
        /// <param name='checkpvs'></param>
        /// <param name='checkpvssize'></param>
        bool CheckOriginInPVS(System.IntPtr org, System.IntPtr checkpvs, int checkpvssize);
        
        /// <param name='mins'></param>
        /// <param name='maxs'></param>
        /// <param name='checkpvs'></param>
        /// <param name='checkpvssize'></param>
        bool CheckBoxInPVS(System.IntPtr mins, System.IntPtr maxs, System.IntPtr checkpvs, int checkpvssize);
        
        /// <param name='e'></param>
        int GetPlayerUserId(System.IntPtr e);
        
        /// <param name='e'></param>
        string GetPlayerNetworkIDString(System.IntPtr e);
        
        int GetEntityCount();
        
        /// <param name='pEdict'></param>
        int IndexOfEdict(System.IntPtr pEdict);
        
        /// <param name='iEntIndex'></param>
        System.IntPtr PEntityOfEntIndex(int iEntIndex);
        
        /// <param name='playerIndex'></param>
        System.IntPtr GetPlayerNetInfo(int playerIndex);
        
        /// <param name='iForceEdictIndex'></param>
        System.IntPtr CreateEdict(int iForceEdictIndex);
        
        /// <param name='e'></param>
        void RemoveEdict(System.IntPtr e);
        
        /// <param name='cb'></param>
        System.IntPtr PvAllocEntPrivateData(int cb);
        
        /// <param name='pEntity'></param>
        void FreeEntPrivateData(System.IntPtr pEntity);
        
        /// <param name='num'></param>
        /// <param name='size'></param>
        System.IntPtr SaveAllocMemory(System.IntPtr num, System.IntPtr size);
        
        /// <param name='pSaveMem'></param>
        void SaveFreeMemory(System.IntPtr pSaveMem);
        
        /// <param name='entindex'></param>
        /// <param name='pos'></param>
        /// <param name='samp'></param>
        /// <param name='vol'></param>
        /// <param name='soundlevel'></param>
        /// <param name='fFlags'></param>
        /// <param name='pitch'></param>
        /// <param name='delay'></param>
        void EmitAmbientSound(int entindex, System.IntPtr pos, string samp, float vol, System.IntPtr soundlevel, int fFlags, int pitch, float delay);
        
        /// <param name='pEdict'></param>
        /// <param name='fadePercent'></param>
        /// <param name='fadeOutSeconds'></param>
        /// <param name='holdTime'></param>
        /// <param name='fadeInSeconds'></param>
        void FadeClientVolume(System.IntPtr pEdict, float fadePercent, float fadeOutSeconds, float holdTime, float fadeInSeconds);
        
        /// <param name='groupIndex'></param>
        /// <param name='name'></param>
        /// <param name='nameBufLen'></param>
        int SentenceGroupPick(int groupIndex, System.IntPtr name, int nameBufLen);
        
        /// <param name='groupIndex'></param>
        /// <param name='name'></param>
        /// <param name='nameBufLen'></param>
        /// <param name='sentenceIndex'></param>
        /// <param name='reset'></param>
        int SentenceGroupPickSequential(int groupIndex, System.IntPtr name, int nameBufLen, int sentenceIndex, int reset);
        
        /// <param name='pSentenceName'></param>
        int SentenceIndexFromName(string pSentenceName);
        
        /// <param name='sentenceIndex'></param>
        string SentenceNameFromIndex(int sentenceIndex);
        
        /// <param name='pGroupName'></param>
        int SentenceGroupIndexFromName(string pGroupName);
        
        /// <param name='groupIndex'></param>
        string SentenceGroupNameFromIndex(int groupIndex);
        
        /// <param name='sentenceIndex'></param>
        float SentenceLength(int sentenceIndex);
        
        /// <param name='str'></param>
        void ServerCommand(string str);
        
        void ServerExecute();
        
        /// <param name='pEdict'></param>
        /// <param name='szFmt'></param>
        void ClientCommand(System.IntPtr pEdict, string szFmt);
        
        /// <param name='style'></param>
        /// <param name='val'></param>
        void LightStyle(int style, string val);
        
        /// <param name='originInEntitySpace'></param>
        /// <param name='decalIndex'></param>
        /// <param name='entityIndex'></param>
        /// <param name='modelIndex'></param>
        /// <param name='lowpriority'></param>
        void StaticDecal(System.IntPtr originInEntitySpace, int decalIndex, int entityIndex, int modelIndex, bool lowpriority);
        
        /// <param name='usepas'></param>
        /// <param name='origin'></param>
        /// <param name='playerbits'></param>
        void Message_DetermineMulticastRecipients(bool usepas, System.IntPtr origin, System.IntPtr playerbits);
        
        /// <param name='ent_index'></param>
        /// <param name='ent_class'></param>
        /// <param name='reliable'></param>
        System.IntPtr EntityMessageBegin(int ent_index, System.IntPtr ent_class, bool reliable);
        
        /// <param name='filter'></param>
        /// <param name='msg_type'></param>
        System.IntPtr UserMessageBegin(System.IntPtr filter, int msg_type);
        
        void MessageEnd();
        
        /// <param name='pEdict'></param>
        /// <param name='szMsg'></param>
        void ClientPrintf(System.IntPtr pEdict, string szMsg);
        
        /// <param name='pos'></param>
        /// <param name='fmt'></param>
        void Con_NPrintf(int pos, string fmt);
        
        /// <param name='info'></param>
        /// <param name='fmt'></param>
        void Con_NXPrintf(System.IntPtr info, string fmt);
        
        /// <param name='pClient'></param>
        /// <param name='pViewent'></param>
        void SetView(System.IntPtr pClient, System.IntPtr pViewent);
        
        float Time();
        
        /// <param name='pClient'></param>
        /// <param name='pitch'></param>
        /// <param name='yaw'></param>
        void CrosshairAngle(System.IntPtr pClient, float pitch, float yaw);
        
        /// <param name='szGetGameDir'></param>
        /// <param name='maxlength'></param>
        void GetGameDir(System.IntPtr szGetGameDir, int maxlength);
        
        /// <param name='filename1'></param>
        /// <param name='filename2'></param>
        /// <param name='iCompare'></param>
        int CompareFileTime(string filename1, string filename2, System.IntPtr iCompare);
        
        /// <param name='lock'></param>
        bool LockNetworkStringTables(bool @lock);
        
        /// <param name='netname'></param>
        System.IntPtr CreateFakeClient(string netname);
        
        /// <param name='clientIndex'></param>
        /// <param name='name'></param>
        string GetClientConVarValue(int clientIndex, string name);
        
        /// <param name='data'></param>
        /// <param name='token'></param>
        /// <param name='maxlen'></param>
        string ParseFile(string data, System.IntPtr token, int maxlen);
        
        /// <param name='source'></param>
        /// <param name='destination'></param>
        bool CopyFile(string source, string destination);
        
        /// <param name='pvs'></param>
        /// <param name='pvssize'></param>
        void ResetPVS(System.IntPtr pvs, int pvssize);
        
        /// <param name='origin'></param>
        void AddOriginToPVS(System.IntPtr origin);
        
        /// <param name='portalNumber'></param>
        /// <param name='isOpen'></param>
        void SetAreaPortalState(int portalNumber, int isOpen);
        
        /// <param name='filter'></param>
        /// <param name='delay'></param>
        /// <param name='pSender'></param>
        /// <param name='pST'></param>
        /// <param name='classID'></param>
        void PlaybackTempEntity(System.IntPtr filter, float delay, System.IntPtr pSender, System.IntPtr pST, int classID);
        
        /// <param name='nodenum'></param>
        /// <param name='pvs'></param>
        /// <param name='vissize'></param>
        int CheckHeadnodeVisible(int nodenum, System.IntPtr pvs, int vissize);
        
        /// <param name='area1'></param>
        /// <param name='area2'></param>
        int CheckAreasConnected(int area1, int area2);
        
        /// <param name='origin'></param>
        int GetArea(System.IntPtr origin);
        
        /// <param name='area'></param>
        /// <param name='bits'></param>
        /// <param name='buflen'></param>
        void GetAreaBits(int area, System.IntPtr bits, int buflen);
        
        /// <param name='vViewOrigin'></param>
        /// <param name='portalKey'></param>
        /// <param name='pPlane'></param>
        bool GetAreaPortalPlane(System.IntPtr vViewOrigin, int portalKey, System.IntPtr pPlane);
        
        /// <param name='pMapName'></param>
        /// <param name='createPlayers'></param>
        bool LoadGameState(string pMapName, bool createPlayers);
        
        /// <param name='pOldLevel'></param>
        /// <param name='pLandmarkName'></param>
        void LoadAdjacentEnts(string pOldLevel, string pLandmarkName);
        
        void ClearSaveDir();
        
        string GetMapEntitiesString();
        
        /// <param name='pName'></param>
        System.IntPtr TextMessageGet(string pName);
        
        /// <param name='msg'></param>
        void LogPrint(string msg);
        
        /// <param name='pEdict'></param>
        /// <param name='pPVSInfo'></param>
        void BuildEntityClusterList(System.IntPtr pEdict, System.IntPtr pPVSInfo);
        
        /// <param name='pSolidEnt'></param>
        /// <param name='pSolidCollide'></param>
        /// <param name='pPrevAbsOrigin'></param>
        /// <param name='testSurroundingBoundsOnly'></param>
        void SolidMoved(System.IntPtr pSolidEnt, System.IntPtr pSolidCollide, System.IntPtr pPrevAbsOrigin, bool testSurroundingBoundsOnly);
        
        /// <param name='pTriggerEnt'></param>
        /// <param name='testSurroundingBoundsOnly'></param>
        void TriggerMoved(System.IntPtr pTriggerEnt, bool testSurroundingBoundsOnly);
        
        /// <param name='worldmin'></param>
        /// <param name='worldmax'></param>
        System.IntPtr CreateSpatialPartition(System.IntPtr worldmin, System.IntPtr worldmax);
        
        /// <param name='param0'></param>
        void DestroySpatialPartition(System.IntPtr param0);
        
        /// <param name='pPad'></param>
        /// <param name='iFlags'></param>
        void DrawMapToScratchPad(System.IntPtr pPad, int iFlags);
        
        /// <param name='iClientIndex'></param>
        System.IntPtr GetEntityTransmitBitsForClient(int iClientIndex);
        
        bool IsPaused();
        
        /// <param name='s'></param>
        void ForceExactFile(string s);
        
        /// <param name='s'></param>
        /// <param name='mins'></param>
        /// <param name='maxs'></param>
        void ForceModelBounds(string s, System.IntPtr mins, System.IntPtr maxs);
        
        void ClearSaveDirAfterClientLoad();
        
        /// <param name='pEntity'></param>
        /// <param name='cvar'></param>
        /// <param name='value'></param>
        void SetFakeClientConVarValue(System.IntPtr pEntity, string cvar, string value);
        
        /// <param name='s'></param>
        void ForceSimpleMaterial(string s);
        
        int IsInCommentaryMode();
        
        /// <param name='portalNumbers'></param>
        /// <param name='isOpen'></param>
        /// <param name='nPortals'></param>
        void SetAreaPortalStates(System.IntPtr portalNumbers, System.IntPtr isOpen, int nPortals);
        
        /// <param name='iEdict'></param>
        void NotifyEdictFlagsChange(int iEdict);
        
        /// <param name='pPlayerEdict'></param>
        System.IntPtr GetPrevCheckTransmitInfo(System.IntPtr pPlayerEdict);
        
        System.IntPtr GetSharedEdictChangeInfo();
        
        void AllowImmediateEdictReuse();
        
        bool IsInternalBuild();
        
        /// <param name='pEdict'></param>
        System.IntPtr GetChangeAccessor(System.IntPtr pEdict);
        
        string GetMostRecentlyLoadedFileName();
        
        string GetSaveFileName();
        
        void MultiplayerEndGame();
        
        /// <param name='pTeamName'></param>
        void ChangeTeam(string pTeamName);
        
        /// <param name='pPVSInfo'></param>
        void CleanUpEntityClusterList(System.IntPtr pPVSInfo);
        
        /// <param name='pAchievementMgr'></param>
        void SetAchievementMgr(System.IntPtr pAchievementMgr);
        
        System.IntPtr GetAchievementMgr();
        
        int GetAppID();
        
        bool IsLowViolence();
        
        /// <param name='pPlayerEntity'></param>
        /// <param name='pName'></param>
        System.IntPtr StartQueryCvarValue(System.IntPtr pPlayerEntity, string pName);
        
        /// <param name='str'></param>
        void InsertServerCommand(string str);
        
        /// <param name='ent_num'></param>
        /// <param name='pinfo'></param>
        bool GetPlayerInfo(int ent_num, System.IntPtr pinfo);
        
        /// <param name='pEdict'></param>
        bool IsClientFullyAuthenticated(System.IntPtr pEdict);
        
        /// <param name='bBenchmarkMode'></param>
        void SetDedicatedServerBenchmarkMode(bool bBenchmarkMode);
        
        /// <param name='pGamestatsData'></param>
        void SetGamestatsData(System.IntPtr pGamestatsData);
        
        System.IntPtr GetGamestatsData();
        
        /// <param name='pPlayerEdict'></param>
        System.IntPtr GetClientSteamID(System.IntPtr pPlayerEdict);
        
        System.IntPtr GetGameServerSteamID();
        
        /// <param name='pEdict'></param>
        /// <param name='pCommand'></param>
        void ClientCommandKeyValues(System.IntPtr pEdict, System.IntPtr pCommand);
        
        /// <param name='entnum'></param>
        System.IntPtr GetClientSteamIDByPlayerIndex(int entnum);
        
        int GetClusterCount();
        
        /// <param name='pBBoxList'></param>
        /// <param name='maxBBox'></param>
        int GetAllClusterBounds(System.IntPtr pBBoxList, int maxBBox);
        
        /// <param name='netname'></param>
        /// <param name='bReportFakeClient'></param>
        System.IntPtr CreateFakeClientEx(string netname, bool bReportFakeClient);
        
        int GetServerVersion();
        
        /// <param name='fScaleFramerate'></param>
        System.IntPtr GMOD_SetTimeManipulator(float fScaleFramerate);
        
        /// <param name='filter'></param>
        /// <param name='data'></param>
        /// <param name='dataSize'></param>
        void GMOD_SendToClient(System.IntPtr filter, System.IntPtr data, int dataSize);
        
        /// <param name='client'></param>
        /// <param name='data'></param>
        /// <param name='dataSize'></param>
        void GMOD_SendToClient(int client, System.IntPtr data, int dataSize);
        
        /// <param name='command'></param>
        void GMOD_RawServerCommand(string command);
        
        System.IntPtr GMOD_CreateDataTable();
        
        /// <param name='dataTable'></param>
        void GMOD_DestroyDataTable(System.IntPtr dataTable);
        
        string GMOD_GetServerAddress();
        
        /// <param name='path'></param>
        System.IntPtr GMOD_LoadModel(string path);
        
        System.IntPtr GetReplay();
    }
}

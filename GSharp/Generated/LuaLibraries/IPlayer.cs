//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSharp.Generated.LuaLibraries {
    using System.ComponentModel;
    using System.Runtime.InteropServices;
    using System;
    
    
    /// <summary>
    /// The player library is used to get the Lua objects that represent players in-game.
    /// </summary>
    public interface IPlayer {
        
        /// <summary>
        /// Gets all the current players in the server (not including connecting clients).NoteThis function returns bots as well as human players. See LibraryFunctionplayerGetBots and  LibraryFunctionplayerGetHumans.
        /// </summary>
        /// <returns>Type: System.Object[] - All TypePlayers currently in the server.</returns>
        object[] GetAll();
        
        /// <summary>
        /// Returns a table of all bots on the server.
        /// </summary>
        /// <returns>Type: System.Object[] - A table only containing bots ( AI / non human players )</returns>
        object[] GetBots();
        
        /// <summary>
        /// Gets the player with the specified connection ID.Connection ID can be retrieved via LibraryFunctiongameeventListen events.For a function that returns a player based on their ClassFunctionEntityEntIndex, see GlobalFunctionEntity.<br/>For a function that returns a player based on their ClassFunctionPlayerUserID, see GlobalFunctionPlayer.
        /// </summary>
        /// <returns>Type: System.Object - Player if one is found, nil otherwise</returns>
        /// <param name='connectionID'>The connection ID to find the player by.</param>
        object GetByID(double connectionID);
        
        /// <summary>
        /// Gets the player with the specified uniqueID (not recommended way to identify players).WarningIt is highly recommended to use LibraryFunctionplayerGetBySteamID or LibraryFunctionplayerGetBySteamID64 instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.
        /// </summary>
        /// <returns>Type: System.Object - Player if one is found, false otherwise.</returns>
        /// <param name='uniqueID'>The ClassFunctionPlayerUniqueID to find the player by.</param>
        object GetByUniqueID(string uniqueID);
        
        /// <summary>
        /// Returns a table of all human ( non bot/AI ) players.Unlike LibraryFunctionplayerGetAll, this does not include bots.
        /// </summary>
        /// <returns>Type: System.Object[] - A table of all human ( non bot/AI ) players.</returns>
        object[] GetHumans();
        
        /// <summary>
        /// Similar to the serverside command "bot", this function creates a new Player bot with the given name. This bot will not obey to the usual "bot_*" commands, and it's the same bot base used in TF2 and CS:S.The best way to control the behaviour of a Player bot right now is to use the HookFunctionGMStartCommand hook and modify its input serverside.NoteDespite this Player being fake, it has to be removed from the server by using ClassFunctionPlayerKick and '''NOT''' ClassFunctionEntityRemove.Also keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!NoteAny Bot created using this method will be considered UnAuthed by Garry's Mod
        /// </summary>
        /// <returns>Type: System.Object - The newly created Player bot. Returns NULL if there's no Player slots available to host it.</returns>
        /// <param name='botName'>The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.Example: "Bot name test", "Bot name test(1)".</param>
        object CreateNextBot(string botName);
        
        /// <summary>
        /// Gets the player with the specified SteamID.
        /// </summary>
        /// <returns>Type: System.Object - Player if one is found, false otherwise.</returns>
        /// <param name='steamID'>The ClassFunctionPlayerSteamID to find the player by.</param>
        object GetBySteamID(string steamID);
        
        /// <summary>
        /// Gets the player with the specified SteamID64.
        /// </summary>
        /// <returns>Type: System.Object - Player if one is found, false otherwise.</returns>
        /// <param name='steamID64'>The ClassFunctionPlayerSteamID64 to find the player by. Also accepts numbers.</param>
        object GetBySteamID64(string steamID64);
        
        /// <summary>
        /// Gives you the player count.Similar to #LibraryFunctionplayerGetAll but with much better performance.
        /// </summary>
        /// <returns>Type: System.Double - Number of players</returns>
        double GetCount();
        
        /// <summary>
        /// Gets the player with the specified AccountID.
        /// </summary>
        /// <returns>Type: System.Object - Player if one is found, false otherwise.</returns>
        /// <param name='accountID'>The ClassFunctionPlayerAccountID to find the player by.</param>
        object GetByAccountID(string accountID);
    }
}
